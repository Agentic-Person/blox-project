/**
 * Mock Data Generators for Testing
 * 
 * Provides realistic test data for the AI-Powered Learning System
 */

import { 
  UnifiedVideoReference, 
  UnifiedChatResponse, 
  TodoSuggestion, 
  CalendarAction,
  LearningPathSegment,
  TodoVideoLink,
  ProgressSyncEvent
} from '../../src/types/shared'

// Mock video references
export const mockVideoReferences: UnifiedVideoReference[] = [
  {
    videoId: 'vid-001',
    youtubeId: 'dQw4w9WgXcQ',
    title: 'Roblox Scripting Basics: Variables and Functions',
    thumbnailUrl: 'https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg',
    creatorName: 'DevKing',
    timestamp: '15:30',
    timestampSeconds: 930,
    relevantSegment: 'In this section we cover how to create variables in Lua...',
    confidence: 0.95,
    transcriptChunkId: 'chunk-001',
    duration: 1200,
    watchProgress: 65,
    linkedTodoIds: ['todo-001', 'todo-002'],
    learningObjectives: ['Variables in Lua', 'Function declarations', 'Script organization'],
    videoUrl: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',
    timestampUrl: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ&t=930s',
    addedAt: '2024-09-02T10:00:00Z',
    lastWatched: '2024-09-02T14:30:00Z'
  },
  {
    videoId: 'vid-002',
    youtubeId: 'Lrj2Hq7xqQ8',
    title: 'Building Your First Roblox Game GUI',
    thumbnailUrl: 'https://img.youtube.com/vi/Lrj2Hq7xqQ8/maxresdefault.jpg',
    creatorName: 'UIExpert',
    timestamp: '8:45',
    timestampSeconds: 525,
    relevantSegment: 'Here we create a simple button that responds to clicks...',
    confidence: 0.88,
    transcriptChunkId: 'chunk-002',
    duration: 2100,
    watchProgress: 30,
    linkedTodoIds: ['todo-003'],
    learningObjectives: ['GUI creation', 'Event handling', 'User experience'],
    videoUrl: 'https://www.youtube.com/watch?v=Lrj2Hq7xqQ8',
    timestampUrl: 'https://www.youtube.com/watch?v=Lrj2Hq7xqQ8&t=525s',
    addedAt: '2024-09-02T09:00:00Z'
  }
]

// Mock todo suggestions
export const mockTodoSuggestions: TodoSuggestion[] = [
  {
    title: 'Practice Variable Declaration in Lua',
    description: 'Create 5 different types of variables using the patterns shown in the video',
    priority: 'medium',
    category: 'practice',
    estimatedMinutes: 30,
    videoReferences: [mockVideoReferences[0]],
    suggestedDueDate: '2024-09-03T10:00:00Z',
    prerequisites: ['Watch scripting basics video'],
    learningObjectives: ['Master variable syntax', 'Understand data types'],
    autoGenerated: true,
    confidence: 0.92
  },
  {
    title: 'Build a Simple GUI Menu',
    description: 'Create a main menu with start, settings, and quit buttons',
    priority: 'high',
    category: 'build',
    estimatedMinutes: 90,
    videoReferences: [mockVideoReferences[1]],
    suggestedDueDate: '2024-09-04T14:00:00Z',
    prerequisites: ['GUI basics understanding'],
    learningObjectives: ['GUI layout', 'Button scripting', 'Menu navigation'],
    autoGenerated: true,
    confidence: 0.87
  }
]

// Mock calendar actions
export const mockCalendarActions: CalendarAction[] = [
  {
    type: 'schedule_video',
    title: 'Watch: Roblox Scripting Basics',
    description: 'Focus on variables and functions section',
    startTime: '2024-09-03T09:00:00Z',
    endTime: '2024-09-03T09:30:00Z',
    duration: 30,
    videoReference: mockVideoReferences[0],
    relatedTodos: ['todo-001']
  },
  {
    type: 'schedule_practice',
    title: 'Practice: Variable Declaration',
    description: 'Hands-on practice session based on video learning',
    startTime: '2024-09-03T10:00:00Z',
    endTime: '2024-09-03T10:30:00Z',
    duration: 30,
    relatedTodos: ['todo-001', 'todo-002']
  }
]

// Mock learning path segments
export const mockLearningPathSegments: LearningPathSegment[] = [
  {
    id: 'path-001',
    order: 1,
    title: 'Lua Fundamentals',
    description: 'Master the basics of Lua programming',
    type: 'video',
    estimatedMinutes: 60,
    videoReferences: [mockVideoReferences[0]],
    prerequisites: [],
    objectives: ['Variables', 'Functions', 'Control structures'],
    completed: false
  },
  {
    id: 'path-002',
    order: 2,
    title: 'GUI Development',
    description: 'Learn to create user interfaces',
    type: 'video',
    estimatedMinutes: 90,
    videoReferences: [mockVideoReferences[1]],
    prerequisites: ['path-001'],
    objectives: ['GUI components', 'Event handling', 'Styling'],
    completed: false
  }
]

// Mock chat response
export const mockChatResponse: UnifiedChatResponse = {
  answer: 'To create variables in Lua, you use the format `local variableName = value`. Here are some examples from the video...',
  videoReferences: mockVideoReferences,
  suggestedQuestions: [
    'How do I create functions in Lua?',
    'What are the different data types?',
    'How do I organize my scripts?'
  ],
  sessionId: 'session-001',
  responseTime: 1250,
  suggestedTodos: mockTodoSuggestions,
  schedulingActions: mockCalendarActions,
  learningPath: mockLearningPathSegments,
  actionButtons: [
    {
      id: 'btn-001',
      label: 'Create Practice Todo',
      icon: 'plus',
      action: {
        type: 'CREATE_TODO',
        payload: { todoId: 'todo-001' }
      },
      variant: 'primary'
    },
    {
      id: 'btn-002',
      label: 'Schedule Video',
      icon: 'calendar',
      action: {
        type: 'SCHEDULE_VIDEO',
        payload: { videoId: 'vid-001' }
      },
      variant: 'secondary'
    }
  ],
  metadata: {
    cacheHit: false,
    searchResultsCount: 5,
    confidence: 0.91,
    tokensUsed: 1200,
    intent: {
      primary: 'learn',
      secondary: ['practice', 'video'],
      confidence: 0.95,
      extractedEntities: {
        concepts: ['variables', 'lua', 'scripting'],
        actions: ['create', 'practice']
      }
    }
  }
}

// Mock todo-video links
export const mockTodoVideoLinks: TodoVideoLink[] = [
  {
    id: 'link-001',
    todoId: 'todo-001',
    videoReference: mockVideoReferences[0],
    linkType: 'reference',
    addedAt: '2024-09-02T10:00:00Z',
    addedBy: 'ai',
    notes: 'Video explains the concepts needed for this practice'
  },
  {
    id: 'link-002',
    todoId: 'todo-003',
    videoReference: mockVideoReferences[1],
    linkType: 'requirement',
    addedAt: '2024-09-02T09:30:00Z',
    addedBy: 'user',
    notes: 'Must watch before starting GUI project'
  }
]

// Mock progress sync events
export const mockProgressSyncEvents: ProgressSyncEvent[] = [
  {
    type: 'video_watched',
    userId: 'user-001',
    timestamp: '2024-09-02T14:30:00Z',
    source: 'video_player',
    data: {
      youtubeId: 'dQw4w9WgXcQ',
      watchedSeconds: 930,
      totalSeconds: 1200,
      completed: false
    },
    relatedEntities: {
      videoIds: ['vid-001'],
      todoIds: ['todo-001']
    }
  },
  {
    type: 'todo_completed',
    userId: 'user-001',
    timestamp: '2024-09-02T15:45:00Z',
    source: 'todo_system',
    data: {
      todoId: 'todo-002',
      completionTime: 25
    },
    relatedEntities: {
      todoIds: ['todo-002'],
      videoIds: ['vid-001']
    }
  }
]

// Test data factory functions
export class MockDataFactory {
  static createVideoReference(overrides: Partial<UnifiedVideoReference> = {}): UnifiedVideoReference {
    return {
      videoId: `vid-${Date.now()}`,
      youtubeId: 'test-youtube-id',
      title: 'Test Video',
      thumbnailUrl: 'https://img.youtube.com/vi/test/maxresdefault.jpg',
      creatorName: 'TestCreator',
      timestamp: '10:00',
      timestampSeconds: 600,
      relevantSegment: 'Test segment content',
      confidence: 0.9,
      transcriptChunkId: 'test-chunk',
      duration: 1000,
      watchProgress: 50,
      linkedTodoIds: [],
      learningObjectives: ['Test objective'],
      videoUrl: 'https://www.youtube.com/watch?v=test',
      timestampUrl: 'https://www.youtube.com/watch?v=test&t=600s',
      addedAt: new Date().toISOString(),
      ...overrides
    }
  }

  static createTodoSuggestion(overrides: Partial<TodoSuggestion> = {}): TodoSuggestion {
    return {
      title: 'Test Todo',
      priority: 'medium',
      category: 'practice',
      estimatedMinutes: 30,
      videoReferences: [this.createVideoReference()],
      autoGenerated: true,
      confidence: 0.85,
      ...overrides
    }
  }

  static createChatResponse(overrides: Partial<UnifiedChatResponse> = {}): UnifiedChatResponse {
    return {
      answer: 'Test answer',
      videoReferences: [this.createVideoReference()],
      suggestedQuestions: ['Test question?'],
      sessionId: 'test-session',
      responseTime: 1000,
      metadata: {
        cacheHit: false,
        searchResultsCount: 1,
        confidence: 0.9
      },
      ...overrides
    }
  }
}