/**
 * End-to-End Integration Test
 * 
 * Comprehensive test demonstrating the full AI-Powered Learning System integration
 * Tests the complete flow from chat to todo creation to video linking
 */

import { describe, test, expect, beforeEach, vi } from 'vitest'
import { 
  IntegrationServices,
  TodoVideoLinker,
  SmartTodoGenerator,
  LearningPathSync
} from '../../src/services/integration'
import { 
  mockVideoReferences,
  mockChatResponse,
  MockDataFactory
} from '../fixtures/mock-data'
import { IntegrationConfig } from '../../src/types/shared'

// Test scenario: Complete integration flow
describe('AI-Powered Learning System - End-to-End Integration', () => {
  let services: IntegrationServices
  let mockUserId: string
  let mockSessionId: string

  beforeEach(() => {
    services = IntegrationServices.create('test-api-key')
    mockUserId = 'test-user-123'
    mockSessionId = 'session-456'
    vi.clearAllMocks()
  })

  test('Complete User Learning Journey - From Question to Scheduled Learning', async () => {
    // üéØ SCENARIO: User asks about Lua variables, gets AI suggestions, creates todos, and schedules learning

    console.log('üöÄ Starting End-to-End Integration Test')

    // ==========================================
    // STEP 1: User asks a question about Lua variables
    // ==========================================
    const userQuestion = "How do I create and use variables in Lua for Roblox scripting?"
    const mockVideoContext = mockVideoReferences[0] // "Lua Variables Basics" video
    
    console.log('üìù Step 1: User asks question about Lua variables')
    expect(userQuestion).toContain('variables')
    expect(mockVideoContext.title).toContain('Scripting')

    // ==========================================
    // STEP 2: AI generates todo suggestions from the question
    // ==========================================
    console.log('ü§ñ Step 2: AI generates smart todo suggestions')
    
    const todoGenerationResult = await services.smartTodoGenerator.generateTodosFromChat(
      userQuestion,
      [mockVideoContext],
      'beginner'
    )

    expect(todoGenerationResult.success).toBe(true)
    expect(todoGenerationResult.data).toBeDefined()
    expect(todoGenerationResult.data!.length).toBeGreaterThan(0)

    const generatedSuggestion = todoGenerationResult.data![0]
    expect(generatedSuggestion.title).toBeDefined()
    expect(generatedSuggestion.autoGenerated).toBe(true)
    expect(generatedSuggestion.videoReferences.length).toBeGreaterThan(0)

    console.log(`   ‚úÖ Generated suggestion: "${generatedSuggestion.title}"`)
    console.log(`   ‚è±Ô∏è  Estimated time: ${generatedSuggestion.estimatedMinutes} minutes`)
    console.log(`   üéØ Confidence: ${Math.round(generatedSuggestion.confidence * 100)}%`)

    // ==========================================
    // STEP 3: Create a todo from the AI suggestion
    // ==========================================
    console.log('üìã Step 3: Create todo from AI suggestion')
    
    // Mock todo creation (would normally go through todo service)
    const createdTodoId = 'todo-' + Date.now()
    const mockTodo = {
      id: createdTodoId,
      userId: mockUserId,
      title: generatedSuggestion.title,
      description: generatedSuggestion.description,
      status: 'pending' as const,
      priority: generatedSuggestion.priority as any,
      category: generatedSuggestion.category,
      estimatedMinutes: generatedSuggestion.estimatedMinutes,
      videoReferences: generatedSuggestion.videoReferences,
      tags: ['ai-generated', 'lua', 'variables'],
      generatedFrom: 'ai' as const,
      aiSuggestion: generatedSuggestion,
      metadata: {
        sessionId: mockSessionId,
        confidence: generatedSuggestion.confidence
      },
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    }

    expect(mockTodo.id).toBe(createdTodoId)
    expect(mockTodo.generatedFrom).toBe('ai')
    expect(mockTodo.videoReferences.length).toBeGreaterThan(0)
    
    console.log(`   ‚úÖ Created todo: ${createdTodoId}`)
    console.log(`   üìö Linked to ${mockTodo.videoReferences.length} video(s)`)

    // ==========================================
    // STEP 4: Link the todo to the video with specific timestamp
    // ==========================================
    console.log('üîó Step 4: Create bidirectional todo-video link')
    
    const videoLinkResult = await services.todoVideoLinker.linkTodoToVideo(
      createdTodoId,
      mockVideoContext,
      'reference',
      'AI-generated link based on content relevance'
    )

    expect(videoLinkResult.success).toBe(true)
    expect(videoLinkResult.data).toBeDefined()
    expect(videoLinkResult.data!.todoId).toBe(createdTodoId)
    expect(videoLinkResult.data!.videoReference.youtubeId).toBe(mockVideoContext.youtubeId)
    expect(videoLinkResult.data!.linkType).toBe('reference')
    expect(videoLinkResult.data!.addedBy).toBe('ai')

    console.log(`   ‚úÖ Created video link: ${videoLinkResult.data!.id}`)
    console.log(`   üì∫ YouTube ID: ${mockVideoContext.youtubeId}`)
    console.log(`   ‚è∞ Timestamp: ${mockVideoContext.timestamp}`)

    // ==========================================
    // STEP 5: Create a learning path with the video
    // ==========================================
    console.log('üõ§Ô∏è  Step 5: Create structured learning path')
    
    const learningPathResult = await services.learningPathSync.createLearningPath(
      mockUserId,
      'Lua Variables Mastery Path',
      mockVideoReferences, // Use all mock videos for a complete path
      ['Understand variable syntax', 'Practice variable creation', 'Build a simple script'],
      'Complete learning path for mastering Lua variables in Roblox'
    )

    expect(learningPathResult.success).toBe(true)
    expect(learningPathResult.data).toBeDefined()

    const pathId = learningPathResult.data!
    
    console.log(`   ‚úÖ Created learning path: ${pathId}`)
    console.log(`   üìπ Includes ${mockVideoReferences.length} videos`)
    console.log(`   üéØ 3 learning objectives defined`)

    // ==========================================
    // STEP 6: Generate scheduling suggestions for the learning path
    // ==========================================
    console.log('üìÖ Step 6: Generate smart scheduling suggestions')
    
    const schedulingResult = await services.learningPathSync.generateSchedulingSuggestions(
      mockUserId,
      pathId,
      {
        sessionsPerWeek: 3,
        sessionDuration: 45, // 45 minutes per session
        preferredTimes: ['evening'],
        startDate: new Date().toISOString()
      }
    )

    expect(schedulingResult.success).toBe(true)
    expect(schedulingResult.data).toBeDefined()
    expect(schedulingResult.data!.length).toBeGreaterThan(0)

    const firstScheduledSession = schedulingResult.data![0]
    expect(firstScheduledSession.type).toBe('schedule_video')
    expect(firstScheduledSession.duration).toBe(45)
    expect(firstScheduledSession.videoReference).toBeDefined()

    console.log(`   ‚úÖ Generated ${schedulingResult.data!.length} scheduling suggestions`)
    console.log(`   ‚è∞ First session: ${firstScheduledSession.title}`)
    console.log(`   üìÖ Duration: ${firstScheduledSession.duration} minutes`)

    // ==========================================
    // STEP 7: Simulate video watching progress
    // ==========================================
    console.log('‚ñ∂Ô∏è  Step 7: Simulate video watching and progress sync')
    
    // Simulate user watching 85% of the video
    const watchProgress = 85
    const currentPosition = Math.floor((mockVideoContext.duration || 1200) * 0.85)
    
    const progressSyncResult = await services.todoVideoLinker.syncVideoProgress(
      mockUserId,
      mockVideoContext.youtubeId,
      watchProgress,
      currentPosition
    )

    expect(progressSyncResult.success).toBe(true)
    
    console.log(`   ‚úÖ Synced video progress: ${watchProgress}%`)
    console.log(`   ‚è∞ Watched to position: ${Math.floor(currentPosition / 60)}:${(currentPosition % 60).toString().padStart(2, '0')}`)

    // ==========================================
    // STEP 8: Simulate learning path progress update
    // ==========================================
    console.log('üìà Step 8: Update learning path progress')
    
    const progressEvent = {
      type: 'video_watched' as const,
      userId: mockUserId,
      timestamp: new Date().toISOString(),
      source: 'video_player' as const,
      data: {
        youtubeId: mockVideoContext.youtubeId,
        watchedSeconds: currentPosition,
        totalSeconds: mockVideoContext.duration || 1200,
        completed: watchProgress >= 80 // Consider 80%+ as completed
      },
      relatedEntities: {
        videoIds: [mockVideoContext.videoId],
        todoIds: [createdTodoId]
      }
    }

    const pathProgressResult = await services.learningPathSync.syncProgress(
      mockUserId,
      pathId,
      progressEvent
    )

    expect(pathProgressResult.success).toBe(true)

    console.log('   ‚úÖ Updated learning path progress')
    console.log('   üèÜ Video marked as completed (85% > 80% threshold)')

    // ==========================================
    // STEP 9: Verify the complete integration
    // ==========================================
    console.log('üîç Step 9: Verify complete integration')

    // Get todo video links to verify bidirectional linking
    const todoLinksResult = await services.todoVideoLinker.getTodoVideoLinks(createdTodoId)
    expect(todoLinksResult.success).toBe(true)
    expect(todoLinksResult.data!.length).toBeGreaterThan(0)

    // Get sync statistics
    const syncStatsResult = await services.todoVideoLinker.getSyncStats(mockUserId)
    expect(syncStatsResult.success).toBe(true)
    expect(syncStatsResult.data!.totalLinks).toBeGreaterThan(0)

    console.log(`   ‚úÖ Verified ${todoLinksResult.data!.length} todo-video links`)
    console.log(`   üìä Total links created: ${syncStatsResult.data!.totalLinks}`)

    // ==========================================
    // STEP 10: Generate analytics and insights
    // ==========================================
    console.log('üìä Step 10: Generate learning analytics')

    const generationStatsResult = await services.smartTodoGenerator.getGenerationStats()
    expect(generationStatsResult.success).toBe(true)

    const learningProgressResult = await services.learningPathSync.getPathProgress(mockUserId, pathId)
    expect(learningProgressResult.success).toBe(true)

    console.log(`   ‚úÖ AI suggestions generated: ${generationStatsResult.data!.totalGenerated}`)
    console.log(`   üìà Learning path progress: ${Math.round(learningProgressResult.data!.completionPercentage)}%`)
    console.log(`   üéØ Top suggestion category: ${Object.keys(generationStatsResult.data!.topCategories)[0] || 'N/A'}`)

    // ==========================================
    // üéâ SUCCESS: Complete integration verified!
    // ==========================================
    console.log('üéâ END-TO-END INTEGRATION TEST COMPLETED SUCCESSFULLY!')
    console.log('')
    console.log('üìã INTEGRATION SUMMARY:')
    console.log('  ‚úÖ User question processed')
    console.log('  ‚úÖ AI todos generated')
    console.log('  ‚úÖ Todo-video links created')
    console.log('  ‚úÖ Learning paths established')
    console.log('  ‚úÖ Smart scheduling implemented')
    console.log('  ‚úÖ Progress tracking functional')
    console.log('  ‚úÖ Analytics and insights available')
    console.log('')
    console.log('üöÄ AI-Powered Learning System is fully operational!')

    // Final assertions to ensure all components work together
    expect(todoGenerationResult.success).toBe(true)
    expect(videoLinkResult.success).toBe(true)
    expect(learningPathResult.success).toBe(true)
    expect(schedulingResult.success).toBe(true)
    expect(progressSyncResult.success).toBe(true)
    expect(pathProgressResult.success).toBe(true)
    expect(todoLinksResult.success).toBe(true)
    expect(syncStatsResult.success).toBe(true)
    expect(generationStatsResult.success).toBe(true)
    expect(learningProgressResult.success).toBe(true)
  }, 30000) // 30 second timeout for comprehensive test

  test('Error Handling and Resilience', async () => {
    console.log('üõ°Ô∏è Testing error handling and system resilience')

    // Test service failures
    const invalidVideoRef = MockDataFactory.createVideoReference({
      youtubeId: '', // Invalid
      title: ''       // Invalid
    })

    const failureResult = await services.todoVideoLinker.linkTodoToVideo(
      'invalid-todo-id',
      invalidVideoRef
    )

    // Should handle errors gracefully
    expect(failureResult.success).toBe(false)
    expect(failureResult.error).toBeDefined()

    console.log('   ‚úÖ Error handling verified')
  })

  test('Performance and Efficiency', async () => {
    console.log('‚ö° Testing performance and efficiency')

    const startTime = Date.now()
    
    // Run multiple operations concurrently
    const promises = [
      services.smartTodoGenerator.generateTodosFromChat(
        'Test question about Lua',
        [mockVideoReferences[0]],
        'beginner'
      ),
      services.todoVideoLinker.linkTodoToVideo(
        'perf-test-todo',
        mockVideoReferences[0]
      ),
      services.learningPathSync.createLearningPath(
        'perf-test-user',
        'Performance Test Path',
        [mockVideoReferences[0]]
      )
    ]

    const results = await Promise.all(promises)
    const endTime = Date.now()
    const duration = endTime - startTime

    // All operations should succeed
    results.forEach(result => {
      expect(result.success).toBe(true)
    })

    // Should complete within reasonable time
    expect(duration).toBeLessThan(5000) // 5 seconds

    console.log(`   ‚úÖ Concurrent operations completed in ${duration}ms`)
  })

  test('Data Integrity and Consistency', async () => {
    console.log('üîí Testing data integrity and consistency')

    const testTodoId = 'integrity-test-todo'
    const testVideo = mockVideoReferences[0]

    // Create link
    const linkResult = await services.todoVideoLinker.linkTodoToVideo(
      testTodoId,
      testVideo,
      'reference'
    )

    expect(linkResult.success).toBe(true)

    // Verify link exists
    const linksResult = await services.todoVideoLinker.getTodoVideoLinks(testTodoId)
    expect(linksResult.success).toBe(true)
    expect(linksResult.data!.length).toBeGreaterThan(0)

    // Verify bidirectional reference
    const videoLinksResult = await services.todoVideoLinker.getVideoTodoLinks(testVideo.youtubeId)
    expect(videoLinksResult.success).toBe(true)
    expect(videoLinksResult.data!.includes(testTodoId)).toBe(true)

    console.log('   ‚úÖ Data integrity verified')
  })
})

// Test individual service health
describe('Service Health Checks', () => {
  let services: IntegrationServices

  beforeEach(() => {
    services = IntegrationServices.create('test-api-key')
  })

  test('All services are healthy and responsive', async () => {
    const healthCheck = await services.healthCheck()

    expect(healthCheck.todoVideoLinker).toBe(true)
    expect(healthCheck.smartTodoGenerator).toBe(true)
    expect(healthCheck.learningPathSync).toBe(true)
    expect(healthCheck.timestamp).toBeDefined()

    console.log('üè• All services healthy and operational')
  })
})