/**
 * Shared Types for AI-Powered Learning System Integration
 * 
 * This module provides unified type definitions that bridge the 
 * Blox Wizard (transcript/chat) and Todo/Calendar systems.
 */

// Unified video reference that works across both systems
export interface UnifiedVideoReference {
  // Core fields (required by both systems)
  videoId: string
  youtubeId: string
  title: string
  thumbnailUrl: string
  creatorName?: string
  
  // Blox Wizard specific fields
  timestamp?: string           // "15:30" format
  timestampSeconds?: number     // 930 (for 15:30)
  relevantSegment?: string      // The matching transcript text
  confidence?: number           // 0-1 relevance score
  transcriptChunkId?: string    // Reference to specific chunk
  
  // Todo system specific fields
  duration?: number             // Total video duration in seconds
  watchProgress?: number        // 0-100 percentage watched
  linkedTodoIds?: string[]      // Related todos
  learningObjectives?: string[] // What the video teaches
  
  // Shared metadata
  videoUrl?: string             // Full YouTube URL
  timestampUrl?: string         // URL with timestamp parameter
  addedAt?: string             // ISO date when linked
  lastWatched?: string         // ISO date of last view
}

// Extended chat response with todo/calendar integration
export interface UnifiedChatResponse {
  // Core Blox Wizard fields
  answer: string
  videoReferences: UnifiedVideoReference[]
  suggestedQuestions: string[]
  sessionId: string
  responseTime: number
  
  // New integration fields
  suggestedTodos?: TodoSuggestion[]
  schedulingActions?: CalendarAction[]
  learningPath?: LearningPathSegment[]
  actionButtons?: ActionButton[]
  
  // Metadata
  metadata: {
    cacheHit: boolean
    searchResultsCount: number
    confidence: number
    tokensUsed?: number
    intent?: DetectedIntent
  }
}

// Todo suggestion from AI
export interface TodoSuggestion {
  title: string
  description?: string
  priority: 'low' | 'medium' | 'high' | 'urgent'
  category: 'practice' | 'learn' | 'build' | 'review' | 'other'
  estimatedMinutes: number
  videoReferences: UnifiedVideoReference[]
  suggestedDueDate?: string
  prerequisites?: string[]
  learningObjectives?: string[]
  autoGenerated: boolean
  confidence: number
}

// Calendar scheduling action
export interface CalendarAction {
  type: 'schedule_video' | 'schedule_practice' | 'schedule_review' | 'block_time'
  title: string
  description?: string
  startTime?: string  // ISO datetime
  endTime?: string    // ISO datetime
  duration: number    // minutes
  recurring?: RecurringPattern
  videoReference?: UnifiedVideoReference
  relatedTodos?: string[]
}

// Learning path segment
export interface LearningPathSegment {
  id: string
  order: number
  title: string
  description: string
  type: 'video' | 'practice' | 'project' | 'quiz'
  estimatedMinutes: number
  videoReferences: UnifiedVideoReference[]
  prerequisites: string[]
  objectives: string[]
  completed: boolean
  completedAt?: string
}

// Action button for chat UI
export interface ActionButton {
  id: string
  label: string
  icon?: string
  action: ChatAction
  variant: 'primary' | 'secondary' | 'ghost'
  disabled?: boolean
  tooltip?: string
}

// Chat action that can be executed
export interface ChatAction {
  type: 'CREATE_TODO' | 'SCHEDULE_VIDEO' | 'START_LEARNING_PATH' | 'TRACK_PROGRESS' | 'VIEW_TRANSCRIPT'
  payload: Record<string, any>
  requiresConfirmation?: boolean
}

// Detected user intent from message
export interface DetectedIntent {
  primary: 'question' | 'schedule' | 'todo' | 'learn' | 'track' | 'general'
  secondary?: string[]
  confidence: number
  extractedEntities?: {
    timeReferences?: string[]
    videoReferences?: string[]
    concepts?: string[]
    actions?: string[]
  }
}

// Recurring pattern for calendar events
export interface RecurringPattern {
  frequency: 'daily' | 'weekly' | 'monthly'
  interval: number  // Every N days/weeks/months
  daysOfWeek?: number[]  // 0-6 for weekly
  endDate?: string  // When recurrence ends
  maxOccurrences?: number  // Or limit by count
}

// Integration link between todo and video
export interface TodoVideoLink {
  id: string
  todoId: string
  videoReference: UnifiedVideoReference
  linkType: 'reference' | 'requirement' | 'output'
  addedAt: string
  addedBy: 'user' | 'ai' | 'system'
  notes?: string
}

// Progress sync event
export interface ProgressSyncEvent {
  type: 'video_watched' | 'todo_completed' | 'path_advanced' | 'milestone_reached'
  userId: string
  timestamp: string
  source: 'video_player' | 'todo_system' | 'calendar' | 'chat'
  data: Record<string, any>
  relatedEntities: {
    videoIds?: string[]
    todoIds?: string[]
    pathIds?: string[]
  }
}

// Integration service configuration
export interface IntegrationConfig {
  // AI service settings
  openaiApiKey: string
  openaiModel: string
  embeddingModel: string
  
  // Feature flags
  enableTodoGeneration: boolean
  enableSmartScheduling: boolean
  enableLearningPaths: boolean
  enableProgressSync: boolean
  
  // Performance settings
  maxVideoReferences: number
  maxTodoSuggestions: number
  cacheTimeoutMinutes: number
  
  // User preferences
  defaultTodoPriority: 'low' | 'medium' | 'high'
  defaultSchedulingDuration: number
  autoLinkVideosToTodos: boolean
}

// Service response wrapper
export interface ServiceResponse<T> {
  success: boolean
  data?: T
  error?: string
  timestamp: string
  source: string
}