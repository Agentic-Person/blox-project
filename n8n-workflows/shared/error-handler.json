{
  "name": "üö® Error Handler - Blox Wizard System",
  "nodes": [
    {
      "parameters": {},
      "id": "error-trigger",
      "name": "üî• Error Trigger",
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "notes": "üî• SYSTEM ERROR DETECTION\n\n‚Ä¢ Automatically triggered when ANY workflow encounters an error\n‚Ä¢ Captures error context, stack trace, and execution data\n‚Ä¢ Central error handling for the entire Blox Wizard ecosystem\n\nüìä Error Data Captured:\n‚Ä¢ Workflow name and ID that failed\n‚Ä¢ Node that caused the error\n‚Ä¢ Error message and stack trace\n‚Ä¢ Execution timestamp and duration\n‚Ä¢ Input data that caused the failure\n‚Ä¢ User context (if available)\n\nüéØ Triggers On:\n‚Ä¢ Node execution failures\n‚Ä¢ Timeout errors\n‚Ä¢ API connection failures\n‚Ä¢ Database query errors\n‚Ä¢ Authentication failures\n‚Ä¢ Resource unavailability\n\n‚ö° Response Time: Immediate error detection\nüîÑ Reliability: Always active, cannot be disabled"
    },
    {
      "parameters": {},
      "id": "sticky-error-types",
      "name": "üîç Error Classification",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [240, 100],
      "width": 380,
      "height": 160,
      "content": "üîç ERROR TYPES & SEVERITY LEVELS\n\nüî¥ CRITICAL (System Down)\n‚Ä¢ Master Orchestrator failures\n‚Ä¢ Database connection lost\n‚Ä¢ Redis cluster unavailable\n‚Ä¢ Authentication service down\n\nüü° HIGH (Feature Degraded)\n‚Ä¢ Knowledge Engine search failures\n‚Ä¢ Scheduler generation errors\n‚Ä¢ Analytics processing issues\n\nüü† MEDIUM (Performance Impact)\n‚Ä¢ Slow API responses\n‚Ä¢ Cache misses\n‚Ä¢ Third-party service delays\n\nüü¢ LOW (Minor Issues)\n‚Ä¢ Invalid user input\n‚Ä¢ Rate limiting\n‚Ä¢ Non-critical integrations"
    },
    {
      "parameters": {
        "mode": "rules",
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "loose"
                },
                "conditions": [
                  {
                    "id": "condition-critical",
                    "leftValue": "={{ $json.error.node?.name }}",
                    "rightValue": "Master Orchestrator|Redis|Database|Authentication",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "üî¥ CRITICAL"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "loose"
                },
                "conditions": [
                  {
                    "id": "condition-high",
                    "leftValue": "={{ $json.error.node?.name }}",
                    "rightValue": "Knowledge Engine|Scheduler|Analytics",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "üü° HIGH"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": false,
                  "leftValue": "",
                  "typeValidation": "loose"
                },
                "conditions": [
                  {
                    "id": "condition-timeout",
                    "leftValue": "={{ $json.error.message }}",
                    "rightValue": "timeout|slow|performance",
                    "operator": {
                      "type": "string",
                      "operation": "regex"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "üü† MEDIUM"
            }
          ]
        },
        "options": {
          "fallbackOutput": "manual",
          "renameFallbackOutput": true,
          "fallbackOutputName": "üü¢ LOW"
        }
      },
      "id": "switch-error-severity",
      "name": "‚öñÔ∏è Error Severity Classifier",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [520, 300],
      "notes": "‚öñÔ∏è INTELLIGENT ERROR CLASSIFICATION\n\n‚Ä¢ Automatically classifies errors by severity level\n‚Ä¢ Routes to appropriate response workflows\n‚Ä¢ Uses pattern matching on node names and error messages\n\nüîç Classification Logic:\n‚Ä¢ CRITICAL: Core system components (Orchestrator, DB, Redis)\n‚Ä¢ HIGH: Major features (Knowledge Engine, Scheduler, Analytics)\n‚Ä¢ MEDIUM: Performance issues (timeouts, slowness)\n‚Ä¢ LOW: Everything else (user errors, minor issues)\n\nüéØ Pattern Matching:\n‚Ä¢ Node name analysis for component identification\n‚Ä¢ Error message content for issue type\n‚Ä¢ Case-insensitive matching for reliability\n‚Ä¢ Regex patterns for flexible matching\n\nüìä Routing Strategy:\n‚Ä¢ Critical ‚Üí Immediate alerts + auto-recovery\n‚Ä¢ High ‚Üí Urgent alerts + manual review\n‚Ä¢ Medium ‚Üí Warning alerts + monitoring\n‚Ä¢ Low ‚Üí Log only + periodic review\n\nüîß Customizable:\n‚Ä¢ Add new patterns for specific error types\n‚Ä¢ Adjust severity levels based on business impact\n‚Ä¢ Configure different routing for different environments"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "error:{{ $json.execution.id }}",
        "value": "={{ JSON.stringify({\n  timestamp: new Date().toISOString(),\n  severity: 'CRITICAL',\n  workflow: $json.workflow.name,\n  workflowId: $json.workflow.id,\n  node: $json.error.node?.name || 'Unknown',\n  message: $json.error.message,\n  stack: $json.error.stack,\n  executionId: $json.execution.id,\n  userId: $json.execution.data?.startData?.destinationNode?.parameters?.userId || 'system',\n  status: 'logged'\n}) }}",
        "options": {
          "expire": true,
          "ttl": 604800
        }
      },
      "id": "redis-log-critical",
      "name": "üî¥ Log Critical Error",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [800, 160],
      "onError": "continueRegularOutput",
      "notes": "üî¥ CRITICAL ERROR LOGGING\n\n‚Ä¢ Immediately logs critical system failures\n‚Ä¢ Stores in Redis with 7-day TTL (604800 seconds)\n‚Ä¢ Enables rapid error analysis and recovery\n\nüîë Key Pattern: 'error:{executionId}'\nüì¶ Data Structure:\n{\n  timestamp: ISO-8601,\n  severity: 'CRITICAL',\n  workflow: string,\n  workflowId: string,\n  node: string,\n  message: string,\n  stack: string,\n  executionId: string,\n  userId: string,\n  status: 'logged'\n}\n\nüéØ Critical Error Types:\n‚Ä¢ Master Orchestrator failures\n‚Ä¢ Database connection errors\n‚Ä¢ Redis cluster issues\n‚Ä¢ Authentication service failures\n\n‚è∞ TTL: 7 days for incident analysis\nüîÑ Auto-expire prevents storage bloat\nüìä Used by monitoring dashboards\nüö® Triggers immediate alert workflows"
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "post",
        "channel": "#blox-wizard-alerts",
        "text": "üö® CRITICAL SYSTEM ERROR üö®",
        "attachments": [
          {
            "color": "danger",
            "title": "Critical Error in {{ $json.workflow.name }}",
            "text": "**Error:** {{ $json.error.message }}\n**Node:** {{ $json.error.node?.name || 'Unknown' }}\n**Time:** {{ new Date().toISOString() }}\n**Execution ID:** {{ $json.execution.id }}",
            "fields": [
              {
                "title": "Workflow",
                "value": "{{ $json.workflow.name }}",
                "short": true
              },
              {
                "title": "Severity",
                "value": "CRITICAL",
                "short": true
              }
            ],
            "footer": "Blox Wizard Error Handler",
            "ts": "{{ Math.floor(Date.now() / 1000) }}"
          }
        ],
        "options": {}
      },
      "id": "slack-critical-alert",
      "name": "üì¢ Slack Critical Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [800, 280],
      "onError": "continueRegularOutput",
      "notes": "üì¢ INSTANT CRITICAL ALERTS\n\n‚Ä¢ Sends immediate Slack notifications for critical errors\n‚Ä¢ Rich message formatting with error details\n‚Ä¢ Tagged for urgent developer attention\n\nüéØ Alert Channel: #blox-wizard-alerts\nüì± Rich Message Format:\n‚Ä¢ Red danger color coding\n‚Ä¢ Error summary and details\n‚Ä¢ Workflow and node information\n‚Ä¢ Execution timestamp and ID\n‚Ä¢ Formatted for mobile readability\n\n‚ö° Immediate Delivery:\n‚Ä¢ No delays or batching\n‚Ä¢ Direct push notifications\n‚Ä¢ Mobile app alerts\n‚Ä¢ Desktop notifications\n\nüîß Message Structure:\n‚Ä¢ Title: Clear error identification\n‚Ä¢ Body: Technical details for debugging\n‚Ä¢ Fields: Structured metadata\n‚Ä¢ Footer: Source identification\n‚Ä¢ Timestamp: Unix timestamp for sorting\n\nüë• Target Audience:\n‚Ä¢ DevOps engineers\n‚Ä¢ System administrators\n‚Ä¢ Senior developers\n‚Ä¢ On-call personnel\n\nüö® Error Handling: Continues even if Slack fails"
    },
    {
      "parameters": {
        "url": "{{ $parameter.webhooks.pagerduty_critical }}",
        "method": "POST",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Token token={{ $parameter.credentials.pagerduty_token }}"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "={{ {\n  routing_key: $parameter.pagerduty.routing_key,\n  event_action: 'trigger',\n  payload: {\n    summary: 'CRITICAL: ' + $json.workflow.name + ' - ' + $json.error.message,\n    source: 'Blox Wizard N8n',\n    severity: 'critical',\n    component: $json.error.node?.name || 'Unknown',\n    class: 'workflow_error',\n    custom_details: {\n      workflow_id: $json.workflow.id,\n      execution_id: $json.execution.id,\n      error_stack: $json.error.stack,\n      timestamp: new Date().toISOString()\n    }\n  }\n} }}",
        "options": {}
      },
      "id": "http-pagerduty-critical",
      "name": "üö® PagerDuty Critical Incident",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [800, 400],
      "onError": "continueRegularOutput",
      "notes": "üö® PAGERDUTY INCIDENT CREATION\n\n‚Ä¢ Creates high-priority incidents for critical errors\n‚Ä¢ Triggers immediate on-call escalation\n‚Ä¢ Integrates with incident management workflow\n\nüì± PagerDuty Integration:\n‚Ä¢ Automatic incident creation\n‚Ä¢ On-call engineer notification\n‚Ä¢ SMS/Phone call escalation\n‚Ä¢ Integration with monitoring tools\n\nüéØ Incident Details:\n‚Ä¢ Summary: Clear error description\n‚Ä¢ Source: Blox Wizard N8n identification\n‚Ä¢ Severity: Critical priority\n‚Ä¢ Component: Failed node name\n‚Ä¢ Class: workflow_error classification\n\nüìä Custom Details:\n‚Ä¢ Workflow ID for debugging\n‚Ä¢ Execution ID for tracing\n‚Ä¢ Full error stack trace\n‚Ä¢ Precise timestamp\n\nüîÑ Escalation Path:\n1. Primary on-call engineer (immediate)\n2. Secondary engineer (5 minutes)\n3. Engineering manager (15 minutes)\n4. Director of Engineering (30 minutes)\n\n‚ö° Response Time: <60 seconds\nüîí Security: API token authentication\nüö® Error Handling: Continues if PagerDuty unavailable"
    },
    {
      "parameters": {
        "operation": "incr",
        "key": "stats:errors:critical",
        "options": {
          "expire": true,
          "ttl": 86400
        }
      },
      "id": "redis-increment-critical",
      "name": "üìà Increment Critical Counter",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1080, 160],
      "onError": "continueRegularOutput",
      "notes": "üìà CRITICAL ERROR STATISTICS\n\n‚Ä¢ Tracks daily critical error count\n‚Ä¢ Enables trend analysis and alerting\n‚Ä¢ Feeds monitoring dashboards\n\nüîë Key: 'stats:errors:critical'\nüî¢ Operation: Atomic increment\n‚è∞ TTL: 24 hours (daily reset)\n\nüìä Used For:\n‚Ä¢ Daily error rate monitoring\n‚Ä¢ Trend analysis and alerts\n‚Ä¢ Capacity planning\n‚Ä¢ SLA compliance tracking\n\nüéØ Alert Thresholds:\n‚Ä¢ 1+ critical errors ‚Üí Immediate attention\n‚Ä¢ 3+ critical errors/day ‚Üí System review\n‚Ä¢ 10+ critical errors/day ‚Üí Emergency response\n\n‚ö° Performance: O(1) Redis operation\nüîÑ Auto-reset: Fresh counts daily\nüìà Integration: Feeds to Grafana/DataDog"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "error:{{ $json.execution.id }}",
        "value": "={{ JSON.stringify({\n  timestamp: new Date().toISOString(),\n  severity: 'HIGH',\n  workflow: $json.workflow.name,\n  workflowId: $json.workflow.id,\n  node: $json.error.node?.name || 'Unknown',\n  message: $json.error.message,\n  executionId: $json.execution.id,\n  userId: $json.execution.data?.startData?.destinationNode?.parameters?.userId || 'system',\n  status: 'logged'\n}) }}",
        "options": {
          "expire": true,
          "ttl": 432000
        }
      },
      "id": "redis-log-high",
      "name": "üü° Log High Severity Error",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [800, 520],
      "onError": "continueRegularOutput",
      "notes": "üü° HIGH SEVERITY ERROR LOGGING\n\n‚Ä¢ Logs major feature failures\n‚Ä¢ 5-day TTL for analysis (432000 seconds)\n‚Ä¢ Less detailed than critical errors\n\nüîë Key Pattern: 'error:{executionId}'\nüì¶ Data Structure: (Similar to critical but severity: 'HIGH')\n\nüéØ High Severity Examples:\n‚Ä¢ Knowledge Engine search failures\n‚Ä¢ Scheduler generation errors\n‚Ä¢ Analytics processing issues\n‚Ä¢ User authentication problems\n\n‚è∞ TTL: 5 days (shorter than critical)\nüìä Monitoring: Dashboard integration\nüîÑ Review: Daily high-severity reports"
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "post",
        "channel": "#blox-wizard-errors",
        "text": "‚ö†Ô∏è High Severity Error in {{ $json.workflow.name }}",
        "attachments": [
          {
            "color": "warning",
            "title": "Feature Degradation Alert",
            "text": "**Error:** {{ $json.error.message }}\n**Node:** {{ $json.error.node?.name || 'Unknown' }}\n**Time:** {{ new Date().toISOString() }}",
            "fields": [
              {
                "title": "Impact",
                "value": "Feature may be unavailable",
                "short": true
              },
              {
                "title": "Action",
                "value": "Manual review required",
                "short": true
              }
            ]
          }
        ]
      },
      "id": "slack-high-alert",
      "name": "üì§ Slack High Severity Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [800, 640],
      "onError": "continueRegularOutput",
      "notes": "üì§ HIGH SEVERITY NOTIFICATIONS\n\n‚Ä¢ Sends alerts to development team\n‚Ä¢ Orange warning color coding\n‚Ä¢ Less urgent than critical alerts\n\nüéØ Alert Channel: #blox-wizard-errors\nüìä Purpose:\n‚Ä¢ Feature degradation awareness\n‚Ä¢ Manual review coordination\n‚Ä¢ Impact assessment\n\n‚è∞ Response Time: Within 1-2 hours\nüë• Audience: Development team\nüîÑ Follow-up: Manual investigation required"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "error:{{ $json.execution.id }}",
        "value": "={{ JSON.stringify({\n  timestamp: new Date().toISOString(),\n  severity: 'MEDIUM',\n  workflow: $json.workflow.name,\n  message: $json.error.message,\n  executionId: $json.execution.id,\n  status: 'logged'\n}) }}",
        "options": {
          "expire": true,
          "ttl": 259200
        }
      },
      "id": "redis-log-medium",
      "name": "üü† Log Medium Severity Error",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [800, 760],
      "onError": "continueRegularOutput",
      "notes": "üü† MEDIUM SEVERITY ERROR LOGGING\n\n‚Ä¢ Performance and timeout issues\n‚Ä¢ 3-day TTL for analysis (259200 seconds)\n‚Ä¢ Minimal data structure for efficiency\n\nüéØ Medium Severity Examples:\n‚Ä¢ API timeout errors\n‚Ä¢ Cache miss performance issues\n‚Ä¢ Third-party service delays\n‚Ä¢ Resource limit warnings\n\nüìä Analysis: Weekly performance reports\nüîÑ Action: Performance optimization review"
    },
    {
      "parameters": {
        "operation": "set",
        "key": "error:{{ $json.execution.id }}",
        "value": "={{ JSON.stringify({\n  timestamp: new Date().toISOString(),\n  severity: 'LOW',\n  workflow: $json.workflow.name,\n  message: $json.error.message,\n  status: 'logged'\n}) }}",
        "options": {
          "expire": true,
          "ttl": 86400
        }
      },
      "id": "redis-log-low",
      "name": "üü¢ Log Low Severity Error",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [800, 880],
      "onError": "continueRegularOutput",
      "notes": "üü¢ LOW SEVERITY ERROR LOGGING\n\n‚Ä¢ Minor issues and user errors\n‚Ä¢ 1-day TTL for basic logging (86400 seconds)\n‚Ä¢ Minimal impact on system performance\n\nüéØ Low Severity Examples:\n‚Ä¢ Invalid user input\n‚Ä¢ Rate limiting triggers\n‚Ä¢ Non-critical integration failures\n‚Ä¢ Validation errors\n\nüìä Purpose: Usage pattern analysis\nüîÑ Review: Weekly summary reports only"
    },
    {
      "parameters": {},
      "id": "sticky-config-notes",
      "name": "üîß Configuration Requirements",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1200, 200],
      "width": 350,
      "height": 200,
      "content": "üîß REQUIRED CONFIGURATION\n\nüì± Slack Integration:\n‚Ä¢ Channel: #blox-wizard-alerts (critical)\n‚Ä¢ Channel: #blox-wizard-errors (high/medium)\n‚Ä¢ Bot token with chat:write permissions\n\nüö® PagerDuty Setup:\n‚Ä¢ Service integration key\n‚Ä¢ Escalation policy configured\n‚Ä¢ On-call schedule active\n\nüîê Environment Variables:\n‚Ä¢ PAGERDUTY_ROUTING_KEY\n‚Ä¢ SLACK_BOT_TOKEN\n‚Ä¢ REDIS_CONNECTION_STRING\n\n‚ö†Ô∏è IMPORTANT:\n‚ñ° Test all alert channels before production\n‚ñ° Configure proper escalation policies\n‚ñ° Set up monitoring dashboard integration\n‚ñ° Document incident response procedures"
    },
    {
      "parameters": {},
      "id": "sticky-recovery-actions",
      "name": "üîÑ Auto-Recovery Actions",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1200, 450],
      "width": 350,
      "height": 180,
      "content": "üîÑ AUTO-RECOVERY STRATEGIES\n\nüéØ Critical Errors:\n‚Ä¢ Restart failed workflow after 5 minutes\n‚Ä¢ Switch to backup Redis instance\n‚Ä¢ Activate read-only mode if DB fails\n‚Ä¢ Send degraded service notifications\n\nüîß High Severity:\n‚Ä¢ Retry with exponential backoff\n‚Ä¢ Route to alternative service endpoints\n‚Ä¢ Enable fallback caching mechanisms\n\nüìä Medium/Low:\n‚Ä¢ Log only, no immediate action\n‚Ä¢ Include in periodic health reports\n‚Ä¢ Queue for batch processing review\n\nüí° Future Enhancements:\n‚Ä¢ Implement circuit breaker patterns\n‚Ä¢ Add predictive failure detection\n‚Ä¢ Create self-healing workflows"
    },
    {
      "parameters": {},
      "id": "sticky-metrics",
      "name": "üìä Error Metrics & KPIs",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [1200, 680],
      "width": 350,
      "height": 160,
      "content": "üìä ERROR METRICS & MONITORING\n\nüéØ Key Performance Indicators:\n‚Ä¢ Error rate per severity level\n‚Ä¢ Mean time to detection (MTTD)\n‚Ä¢ Mean time to recovery (MTTR)\n‚Ä¢ Error distribution by workflow\n‚Ä¢ Peak error time analysis\n\nüìà Dashboard Integration:\n‚Ä¢ Real-time error count widgets\n‚Ä¢ Severity breakdown charts\n‚Ä¢ Workflow health status\n‚Ä¢ Historical trend analysis\n\n‚ö° Alert Thresholds:\n‚Ä¢ 1 critical error ‚Üí Immediate\n‚Ä¢ 5+ high errors/hour ‚Üí Warning\n‚Ä¢ 50+ medium errors/hour ‚Üí Review\n‚Ä¢ Error rate >1% ‚Üí Investigation"
    }
  ],
  "pinData": {},
  "connections": {
    "üî• Error Trigger": {
      "main": [
        [
          {
            "node": "‚öñÔ∏è Error Severity Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öñÔ∏è Error Severity Classifier": {
      "main": [
        [
          {
            "node": "üî¥ Log Critical Error",
            "type": "main",
            "index": 0
          },
          {
            "node": "üì¢ Slack Critical Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "üö® PagerDuty Critical Incident",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üü° Log High Severity Error",
            "type": "main",
            "index": 0
          },
          {
            "node": "üì§ Slack High Severity Alert",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üü† Log Medium Severity Error",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "üü¢ Log Low Severity Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üî¥ Log Critical Error": {
      "main": [
        [
          {
            "node": "üìà Increment Critical Counter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "blox-wizard-error-handler"
  },
  "id": "error-handler",
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "error-handling",
      "name": "error-handling"
    },
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "blox-wizard",
      "name": "blox-wizard"
    }
  ]
}